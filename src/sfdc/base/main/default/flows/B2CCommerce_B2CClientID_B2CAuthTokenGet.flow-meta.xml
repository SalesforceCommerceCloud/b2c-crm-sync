<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>54.0</apiVersion>
    <assignments>
        <description>... capture an error explaining that the B2C Client ID was not provided.</description>
        <name>asn_b2cClientIDNotProvided</name>
        <label>Create the B2C Client ID Not Provided Error</label>
        <locationX>977</locationX>
        <locationY>94</locationY>
        <assignmentItems>
            <assignToReference>ErrorMessage</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Please provide a valid B2C Client ID representation (either an Object, Token, or recordId).</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>IsSuccess</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <description>... capture an error explaining that the AuthToken was not successfully retrieved from the B2C Commerce Account Manager.</description>
        <name>asn_couldNotRetrieveAuthToken</name>
        <label>Create the AuthToken Validation Error</label>
        <locationX>245</locationX>
        <locationY>1759</locationY>
        <assignmentItems>
            <assignToReference>ErrorMessage</assignToReference>
            <operator>Add</operator>
            <value>
                <stringValue>Could not retrieve an AuthToken from the B2C Commerce Account Manager instance.  Please enable auditing on the B2C Client ID for additional details.</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>IsSuccess</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>ResponseBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>sub_retrieveB2CAuthToken.ResponseBody</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <description>... capture an error explaining that the B2C Client ID could not be verified as active and existing.</description>
        <name>asn_couldNotVerifyB2CClientID</name>
        <label>Create the B2C Client ID Validation Error</label>
        <locationX>975</locationX>
        <locationY>1009</locationY>
        <assignmentItems>
            <assignToReference>ErrorMessage</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Could not verify the existence of the B2C Client ID.  Please check the key provided -- and ensure that the B2C Client ID is active.</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>IsSuccess</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <description>... expose the verified / valid B2C AuthToken and its expirationDate to the caller.</description>
        <name>asn_setOutputValues</name>
        <label>Expose the Valid B2C AuthToken</label>
        <locationX>858</locationX>
        <locationY>1350</locationY>
        <assignmentItems>
            <assignToReference>B2CAuthToken</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>recGet_ValidAuthToken.B2C_AuthToken__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>IsSuccess</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <description>... expose the verified / valid B2C AuthToken and its expirationDate to the caller.</description>
        <name>asn_setOutputValues_RetrieveSuccess</name>
        <label>Expose the Valid B2C AuthToken</label>
        <locationX>534</locationX>
        <locationY>2275</locationY>
        <assignmentItems>
            <assignToReference>B2CAuthToken</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>sub_retrieveB2CAuthToken.AuthToken</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>IsSuccess</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>ResponseBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>sub_retrieveB2CAuthToken.ResponseBody</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <description>... assign the Client ID</description>
        <name>asn_varB2CClientID</name>
        <label>Assign the varB2CClientID</label>
        <locationX>533</locationX>
        <locationY>641</locationY>
        <assignmentItems>
            <assignToReference>varB2CClientID</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>recGet_B2CClientID</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>dec_wasB2CClientIDFound</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>... assign the Client ID</description>
        <name>asn_varB2CClientIDCID</name>
        <label>Assign the varB2CClientID</label>
        <locationX>294</locationX>
        <locationY>539</locationY>
        <assignmentItems>
            <assignToReference>varB2CClientID</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>recGet_B2CClientIDByCID</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>dec_wasB2CClientIDFound</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>... assign the Client ID</description>
        <name>asn_varB2CClientIDCID_0</name>
        <label>Assign the varB2CClientID</label>
        <locationX>757</locationX>
        <locationY>534</locationY>
        <assignmentItems>
            <assignToReference>varB2CClientID</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>B2CClientID</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>dec_wasB2CClientIDFound</targetReference>
        </connector>
    </assignments>
    <decisions>
        <description>... evaluate if we need to execute the Pause (we don&apos;t if persistence is being bypassed).</description>
        <name>dec_isPersistenceBypassed</name>
        <label>Is Persistence Being Bypassed?</label>
        <locationX>526</locationX>
        <locationY>1993</locationY>
        <defaultConnector>
            <targetReference>pause_transactionCommit</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Persistence Is Enabled</defaultConnectorLabel>
        <rules>
            <name>dec_isPersistenceBypassedTrue</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>BypassAuthTokenAuditing</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>asn_setOutputValues_RetrieveSuccess</targetReference>
            </connector>
            <label>Persistence Is Bypassed</label>
        </rules>
    </decisions>
    <decisions>
        <description>... evaluate if a B2C Client ID was retrieved</description>
        <name>dec_wasB2CClientIDFound</name>
        <label>Was a valid B2C Client ID Found?</label>
        <locationX>525</locationX>
        <locationY>869</locationY>
        <defaultConnector>
            <targetReference>asn_couldNotVerifyB2CClientID</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Not Found</defaultConnectorLabel>
        <rules>
            <name>dec_wasB2CClientIDFound_True</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>varB2CClientID</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>recGet_ValidAuthToken</targetReference>
            </connector>
            <label>Was Found</label>
        </rules>
    </decisions>
    <decisions>
        <description>... evaluate if a source record was provided -- and if so, retrieve or validate the B2C Client ID.</description>
        <name>dec_wasRecordIDProvided</name>
        <label>Was a Source Record Provided?</label>
        <locationX>524</locationX>
        <locationY>226</locationY>
        <defaultConnector>
            <targetReference>asn_b2cClientIDNotProvided</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>None Provided</defaultConnectorLabel>
        <rules>
            <name>decOut_IDResource_B2CClientIDObjProvided</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>B2CClientID</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>asn_varB2CClientIDCID_0</targetReference>
            </connector>
            <label>Object Value Provided</label>
        </rules>
        <rules>
            <name>decOut_IDResource_RecordIDProvided</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>recordId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>recGet_B2CClientID</targetReference>
            </connector>
            <label>RecordID Provided</label>
        </rules>
        <rules>
            <name>decOut_IDResource_B2CClientIDProvided</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>B2CClientIDValue</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>recGet_B2CClientIDByCID</targetReference>
            </connector>
            <label>Token Value Provided</label>
        </rules>
    </decisions>
    <decisions>
        <description>... evaluate if a valid authToken was found -- or, does an authToken need to be requested.</description>
        <name>dec_wasValidAuthTokenFound</name>
        <label>Was a Valid AuthToken Found?</label>
        <locationX>525</locationX>
        <locationY>1353</locationY>
        <defaultConnector>
            <targetReference>sub_retrieveB2CAuthToken</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Was Not Found</defaultConnectorLabel>
        <rules>
            <name>Was_Found</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>recGet_ValidAuthToken</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>asn_setOutputValues</targetReference>
            </connector>
            <label>Was Found</label>
        </rules>
    </decisions>
    <decisions>
        <description>... evaluate if a valid authToken was retrieved -- or if exceptions were processed.</description>
        <name>dec_wasValidAuthTokenRetrieved</name>
        <label>Was a Valid AuthToken Retrieved?</label>
        <locationX>524</locationX>
        <locationY>1760</locationY>
        <defaultConnector>
            <targetReference>asn_couldNotRetrieveAuthToken</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Was Not Retrieved</defaultConnectorLabel>
        <rules>
            <name>Was_Fadec_wasValidAuthTokenRetrieved_True</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>sub_retrieveB2CAuthToken.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>sub_retrieveB2CAuthToken.AuthToken</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>dec_isPersistenceBypassed</targetReference>
            </connector>
            <label>Was Retrieved</label>
        </rules>
    </decisions>
    <description>... this flow is used to retrieve / request a REST API AuthToken from B2C Commerce&apos;s Account Manager for a given NamedCredential and B2C ClientID combination.</description>
    <interviewLabel>B2C Commerce: Auth: Get AuthToken {!$Flow.CurrentDateTime}</interviewLabel>
    <label>B2C Commerce: B2C Client ID: Account Manager AuthToken: Get</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>FREE_FORM_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <description>... retrieve the B2C Client ID</description>
        <name>recGet_B2CClientID</name>
        <label>Retrieve the B2C Client ID</label>
        <locationX>533</locationX>
        <locationY>439</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>asn_varB2CClientID</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <filters>
            <field>IsDeleted</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <filters>
            <field>Is_Active__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>Is_Certificate_Verified__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>B2C_Client_ID__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>... retrieve the B2C Client ID by the CID (Client ID) value.</description>
        <name>recGet_B2CClientIDByCID</name>
        <label>Retrieve the B2C Client ID by CID</label>
        <locationX>294</locationX>
        <locationY>226</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>asn_varB2CClientIDCID</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>B2CClientIDValue</elementReference>
            </value>
        </filters>
        <filters>
            <field>IsDeleted</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <filters>
            <field>Is_Active__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>Is_Certificate_Verified__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>B2C_Client_ID__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>... attempt to retrieve a valid B2C Commerce / Account Manager AuthToken for the NamedCredential / B2C ClientID combination.</description>
        <name>recGet_ValidAuthToken</name>
        <label>Retrieve the First Valid AuthToken</label>
        <locationX>533</locationX>
        <locationY>1113</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>dec_wasValidAuthTokenFound</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Is_Valid__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>Is_Expired__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <filters>
            <field>B2C_Client_ID__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>varB2CClientID.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>Is_Invalidated__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>B2C_AuthToken__c</object>
        <sortField>Expiration_Date__c</sortField>
        <sortOrder>Desc</sortOrder>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <start>
        <locationX>406</locationX>
        <locationY>8</locationY>
        <connector>
            <targetReference>dec_wasRecordIDProvided</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <subflows>
        <description>... retrieve the B2C AuthToken from the specified AccountManager instance.</description>
        <name>sub_retrieveB2CAuthToken</name>
        <label>Retrieve a B2C AuthToken</label>
        <locationX>532</locationX>
        <locationY>1569</locationY>
        <connector>
            <targetReference>dec_wasValidAuthTokenRetrieved</targetReference>
        </connector>
        <flowName>B2CCommerce_B2CClientID_AccountManager_AuthTokenRetrieve</flowName>
        <inputAssignments>
            <name>B2CClientID</name>
            <value>
                <elementReference>varB2CClientID</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>BypassAuthTokenAuditing</name>
            <value>
                <elementReference>BypassAuthTokenAuditing</elementReference>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </subflows>
    <variables>
        <description>... represents the valid B2C AuthToken retrieved for the NamedCredential / B2C ClientID combination.</description>
        <name>B2CAuthToken</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
    </variables>
    <variables>
        <description>... represents the B2C ClientID object representation.</description>
        <name>B2CClientID</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <objectType>B2C_Client_ID__c</objectType>
    </variables>
    <variables>
        <description>... represents the B2C ClientID used to retrieve a B2C Commerce REST API AuthToken via Account Manager.</description>
        <name>B2CClientIDValue</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>... controls whether auditing should be performed when retrieving an authToken.</description>
        <name>BypassAuthTokenAuditing</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
    <variables>
        <description>... represents any error message(s) that were collected during flow processing.</description>
        <name>ErrorMessage</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
    </variables>
    <variables>
        <description>... describes if the authToken process was successful or failed</description>
        <name>IsSuccess</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
    <variables>
        <description>... represents the recordId of the B2C Client ID for which an authToken is being retrieved.</description>
        <name>recordId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>... represents the responseBody collected from the B2C AuthToken request.</description>
        <name>ResponseBody</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
    </variables>
    <variables>
        <description>... represents the retrieved B2C Client ID</description>
        <name>varB2CClientID</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
        <objectType>B2C_Client_ID__c</objectType>
    </variables>
    <waits>
        <description>... commit any open transactions and write any of the dataEvents that are open or pending.</description>
        <name>pause_transactionCommit</name>
        <label>Commit the Transaction</label>
        <locationX>787</locationX>
        <locationY>2276</locationY>
        <defaultConnectorLabel>Pause</defaultConnectorLabel>
        <waitEvents>
            <name>pause_transactionCommit_commitEvent</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>asn_setOutputValues_RetrieveSuccess</targetReference>
            </connector>
            <eventType>AlarmEvent</eventType>
            <inputParameters>
                <name>AlarmTime</name>
                <value>
                    <elementReference>$Flow.CurrentDateTime</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>TimeOffset</name>
                <value>
                    <numberValue>0.0</numberValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>TimeOffsetUnit</name>
                <value>
                    <stringValue>Hours</stringValue>
                </value>
            </inputParameters>
            <label>Commit Transaction</label>
        </waitEvents>
    </waits>
</Flow>
